name: 🚀 Build and Release

on:
  # 当推送到master分支或推送标签时触发
  push:
    branches:
      - 'master'
      - 'main'
    tags:
      - 'v*'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: v2.0.1)'
        required: true
        default: 'v2.0.0'
        type: string
      prerelease:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean

# 设置权限
permissions:
  contents: write
  packages: write
  pull-requests: read

# 环境变量
env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/qqwebhookpro

jobs:  # 1. 构建和测试
  build-and-test:
    name: 🔨 构建和测试
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      package-version: ${{ steps.package.outputs.version }}
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 pnpm
        uses: pnpm/action-setup@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📂 获取 pnpm 存储目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🗂️ 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔧 安装依赖
        run: |
          pnpm install --frozen-lockfile
          echo "✅ 依赖安装完成"

      - name: 📋 获取版本信息
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # 如果是标签推送，使用标签作为版本
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # 如果是分支推送，使用package.json版本 + commit hash
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            SHORT_SHA=${GITHUB_SHA::7}
            VERSION="v${PACKAGE_VERSION}-${SHORT_SHA}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "🏷️ 版本: ${VERSION}"

      - name: 📋 获取package.json版本
        id: package
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Package版本: ${PACKAGE_VERSION}"

      - name: 🧪 运行代码检查
        run: |
          echo "🔍 运行基础语法检查..."
          pnpm run lint
          echo "✅ 基础语法检查通过"
          
          echo "🔍 运行TypeScript类型检查..."
          pnpm run type-check
          echo "✅ TypeScript类型检查通过"

      - name: 🏗️ 构建项目
        run: |
          echo "🔨 开始构建项目..."
          pnpm run build
          echo "✅ 项目构建完成"

      - name: 📦 创建构建产物
        run: |
          echo "📦 准备构建产物..."
          mkdir -p release-assets
          
          # 获取git commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION_WITH_HASH="${{ steps.version.outputs.version }}-${COMMIT_HASH}"
          
          # 创建完整的源码包 (排除变化的文件)
          echo "📁 创建源码包..."
          tar -czf release-assets/qq-webhook-pro-${VERSION_WITH_HASH}-source.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='dist' \
            --exclude='logs' \
            --exclude='backups' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='config.json' \
            --exclude='release-assets' \
            .
          
          # 创建构建后的发布包
          echo "📦 创建发布包..."
          mkdir -p qq-webhook-pro-release
          
          # 复制必要文件
          cp -r dist/ qq-webhook-pro-release/
          cp package.json qq-webhook-pro-release/
          cp pnpm-lock.yaml qq-webhook-pro-release/
          cp README.md qq-webhook-pro-release/
          cp PROJECT_SUMMARY.md qq-webhook-pro-release/
          
          # 复制可选文件（如果存在）
          [ -f DEPLOYMENT.md ] && cp DEPLOYMENT.md qq-webhook-pro-release/ || echo "⚠️  DEPLOYMENT.md 不存在，跳过"
          [ -f Dockerfile ] && cp Dockerfile qq-webhook-pro-release/ || echo "⚠️  Dockerfile 不存在，跳过"  
          [ -f docker-compose.yml ] && cp docker-compose.yml qq-webhook-pro-release/ || echo "⚠️  docker-compose.yml 不存在，跳过"
          [ -f nginx.conf ] && cp nginx.conf qq-webhook-pro-release/ || echo "⚠️  nginx.conf 不存在，跳过"
          
          # 创建启动脚本
          cat > qq-webhook-pro-release/start.sh << 'EOF'
          #!/bin/bash
          echo "🚀 启动 QQ Webhook Pro..."
          
          # 检查Node.js版本
          if ! command -v node &> /dev/null; then
              echo "❌ Node.js 未安装，请先安装 Node.js 18+"
              exit 1
          fi
          
          NODE_VERSION=$(node -v | sed 's/v//')
          MAJOR_VERSION=$(echo $NODE_VERSION | cut -d. -f1)
          
          if [ "$MAJOR_VERSION" -lt 18 ]; then
              echo "❌ Node.js 版本过低，需要 18+，当前版本: $NODE_VERSION"
              exit 1
          fi
            # 安装生产依赖
          echo "📦 安装生产依赖..."
          pnpm install --prod --frozen-lockfile
          
          # 启动服务
          echo "🎉 启动服务..."
          pnpm start
          EOF
          
          chmod +x qq-webhook-pro-release/start.sh
          
          # 创建Windows启动脚本
          cat > qq-webhook-pro-release/start.bat << 'EOF'
          @echo off
          echo 🚀 启动 QQ Webhook Pro...
          
          :: 检查Node.js
          node --version >nul 2>&1
          if errorlevel 1 (
              echo ❌ Node.js 未安装，请先安装 Node.js 18+
              pause
              exit /b 1
          )
            :: 安装生产依赖
          echo 📦 安装生产依赖...
          pnpm install --prod --frozen-lockfile
          
          :: 启动服务
          echo 🎉 启动服务...
          pnpm start
          EOF
          
          # 压缩发布包
          tar -czf release-assets/qq-webhook-pro-${VERSION_WITH_HASH}-release.tar.gz qq-webhook-pro-release/
          zip -r release-assets/qq-webhook-pro-${VERSION_WITH_HASH}-release.zip qq-webhook-pro-release/
          
          echo "✅ 构建产物准备完成"
          echo "📁 生成的文件："
          ls -la release-assets/

      - name: 📤 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release-assets/
          retention-days: 30

  # 发布到GitHub Releases
  release:
    name: 🚀 发布版本
    runs-on: ubuntu-latest
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: release-assets/

      - name: 🚀 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.build-and-test.outputs.version }}
          tag_name: ${{ needs.build-and-test.outputs.version }}
          prerelease: ${{ github.event.inputs.prerelease || false }}
          generate_release_notes: true
          files: |
            release-assets/*
          body: |
            ## 🎉 QQ Webhook Pro ${{ needs.build-and-test.outputs.version }}
            
            ### 📦 下载说明
            - **源码包**: `qq-webhook-pro-*-source.tar.gz` - 完整源码，需要自行构建
            - **发布包**: `qq-webhook-pro-*-release.tar.gz/.zip` - 预构建版本，开箱即用
            
            ### 🚀 快速开始
            1. 下载发布包
            2. 解压后运行 `./start.sh` (Linux/Mac) 或 `start.bat` (Windows)
            3. 访问 http://localhost:3002
            
            ### 📋 系统要求
            - Node.js 18+
            - pnpm (自动安装依赖)
            
            ---
            
            完整文档请查看 [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ❌ 发布失败通知
        if: needs.create-release.result == 'failure'
        run: |
          echo "❌ QQ Webhook Pro ${{ needs.build-and-test.outputs.version }} 发布失败!"
          echo "请检查工作流日志获取详细信息。"
          exit 1

  