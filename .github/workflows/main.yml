name: 🚀 Build and Release

on:
  # 当推送到master分支或推送标签时触发
  push:
    branches:
      - 'master'
      - 'main'
    tags:
      - 'v*'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: v2.0.1)'
        required: true
        default: 'v2.0.0'
        type: string
      prerelease:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean

# 设置权限
permissions:
  contents: write
  packages: write
  pull-requests: read

# 环境变量
env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/qqwebhookpro

jobs:  # 1. 构建和测试
  build-and-test:
    name: 🔨 构建和测试
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      package-version: ${{ steps.package.outputs.version }}
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📂 获取 pnpm 存储目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🗂️ 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔧 安装依赖
        run: |
          pnpm install --frozen-lockfile
          echo "✅ 依赖安装完成"

      - name: 📋 获取版本信息
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # 如果是标签推送，使用标签作为版本
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # 如果是分支推送，使用package.json版本 + commit hash
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            SHORT_SHA=${GITHUB_SHA::7}
            VERSION="v${PACKAGE_VERSION}-${SHORT_SHA}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "🏷️ 版本: ${VERSION}"

      - name: 📋 获取package.json版本
        id: package
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Package版本: ${PACKAGE_VERSION}"

      - name: 🧪 运行代码检查
        run: |
          echo "🔍 运行ESLint检查..."
          pnpm run lint
          echo "✅ 代码检查通过"

      - name: 🏗️ 构建项目
        run: |
          echo "🔨 开始构建项目..."
          pnpm run build
          echo "✅ 项目构建完成"

      - name: 📦 创建构建产物
        run: |
          echo "📦 准备构建产物..."
          mkdir -p release-assets
          
          # 创建完整的源码包
          echo "📁 创建源码包..."
          tar -czf release-assets/qq-webhook-pro-${{ steps.version.outputs.version }}-source.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='logs' \
            --exclude='backups' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='config.json' \
            .
          
          # 创建构建后的发布包
          echo "📦 创建发布包..."
          mkdir -p qq-webhook-pro-release
            # 复制必要文件
          cp -r dist/ qq-webhook-pro-release/
          cp package.json qq-webhook-pro-release/
          cp pnpm-lock.yaml qq-webhook-pro-release/
          cp README.md qq-webhook-pro-release/
          cp PROJECT_SUMMARY.md qq-webhook-pro-release/
          cp DEPLOYMENT.md qq-webhook-pro-release/
          cp Dockerfile qq-webhook-pro-release/
          cp docker-compose.yml qq-webhook-pro-release/
          cp nginx.conf qq-webhook-pro-release/
          cp -r deploy*.sh qq-webhook-pro-release/ 2>/dev/null || true
          cp -r deploy*.bat qq-webhook-pro-release/ 2>/dev/null || true
          
          # 创建启动脚本
          cat > qq-webhook-pro-release/start.sh << 'EOF'
          #!/bin/bash
          echo "🚀 启动 QQ Webhook Pro..."
          
          # 检查Node.js版本
          if ! command -v node &> /dev/null; then
              echo "❌ Node.js 未安装，请先安装 Node.js 18+"
              exit 1
          fi
          
          NODE_VERSION=$(node -v | sed 's/v//')
          MAJOR_VERSION=$(echo $NODE_VERSION | cut -d. -f1)
          
          if [ "$MAJOR_VERSION" -lt 18 ]; then
              echo "❌ Node.js 版本过低，需要 18+，当前版本: $NODE_VERSION"
              exit 1
          fi
            # 安装生产依赖
          echo "📦 安装生产依赖..."
          pnpm install --prod --frozen-lockfile
          
          # 启动服务
          echo "🎉 启动服务..."
          pnpm start
          EOF
          
          chmod +x qq-webhook-pro-release/start.sh
          
          # 创建Windows启动脚本
          cat > qq-webhook-pro-release/start.bat << 'EOF'
          @echo off
          echo 🚀 启动 QQ Webhook Pro...
          
          :: 检查Node.js
          node --version >nul 2>&1
          if errorlevel 1 (
              echo ❌ Node.js 未安装，请先安装 Node.js 18+
              pause
              exit /b 1
          )
            :: 安装生产依赖
          echo 📦 安装生产依赖...
          pnpm install --prod --frozen-lockfile
          
          :: 启动服务
          echo 🎉 启动服务...
          pnpm start
          EOF
          
          # 压缩发布包
          tar -czf release-assets/qq-webhook-pro-${{ steps.version.outputs.version }}-release.tar.gz qq-webhook-pro-release/
          zip -r release-assets/qq-webhook-pro-${{ steps.version.outputs.version }}-release.zip qq-webhook-pro-release/
          
          echo "✅ 构建产物准备完成"

      - name: 📤 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release-assets/
          retention-days: 30

  # 2. Docker镜像构建
  build-docker:
    name: 🐳 构建Docker镜像
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 登录到容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build-and-test.outputs.version }}

      - name: 🏗️ 构建并推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
  # 3. 创建GitHub Release
  create-release:
    name: 🎉 创建GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker]
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📤 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: release-assets/

      - name: 📋 生成更新日志
        id: changelog
        run: |
          echo "📝 生成更新日志..."
          
          # 获取上一个标签
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n 1 2>/dev/null || echo "")
          CURRENT_TAG="${{ needs.build-and-test.outputs.version }}"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          
          # 判断是否为分支推送
          if [[ ! "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "## 🚧 QQ Webhook Pro $CURRENT_TAG (开发版本)" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "> ⚠️ **这是一个开发版本，仅供测试使用**" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "- 📝 **分支**: ${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "- 🔗 **提交**: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_OUTPUT
            echo "- 🕐 **构建时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          else
            echo "## 🎉 QQ Webhook Pro $CURRENT_TAG" >> $GITHUB_OUTPUT
          fi
          
          echo "" >> $GITHUB_OUTPUT
          echo "### 📦 此版本包含" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "- 🔨 **完整源码包**: \`qq-webhook-pro-$CURRENT_TAG-source.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- 📦 **即用发布包**: \`qq-webhook-pro-$CURRENT_TAG-release.tar.gz\` / \`qq-webhook-pro-$CURRENT_TAG-release.zip\`" >> $GITHUB_OUTPUT
          echo "- 🐳 **Docker镜像**: \`ghcr.io/${{ github.repository }}:$CURRENT_TAG\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🚀 快速开始" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "#### 方式1: 使用发布包" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "# 下载并解压发布包" >> $GITHUB_OUTPUT
          echo "tar -xzf qq-webhook-pro-$CURRENT_TAG-release.tar.gz" >> $GITHUB_OUTPUT
          echo "cd qq-webhook-pro-release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "# 启动服务" >> $GITHUB_OUTPUT
          echo "./start.sh  # Linux/macOS" >> $GITHUB_OUTPUT
          echo "# 或" >> $GITHUB_OUTPUT
          echo "start.bat   # Windows" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "#### 方式2: 使用Docker" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "docker run -d -p 3002:3002 -p 5173:5173 \\" >> $GITHUB_OUTPUT
          echo "  -v ./data:/app/data \\" >> $GITHUB_OUTPUT
          echo "  ghcr.io/${{ github.repository }}:$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT          
          if [ -n "$PREVIOUS_TAG" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "### 📝 更新内容" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          elif [[ ! "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "### 📝 最近提交" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log --oneline -10 --pretty=format:"- %s (\`%h\`)" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          echo "" >> $GITHUB_OUTPUT
          echo "### 📚 文档和支持" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "- 📖 [完整文档](./README.md)" >> $GITHUB_OUTPUT
          echo "- 🚀 [部署指南](./DEPLOYMENT.md)" >> $GITHUB_OUTPUT
          echo "- 📊 [项目总结](./PROJECT_SUMMARY.md)" >> $GITHUB_OUTPUT
          echo "- 🐛 [问题反馈](../../issues)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT          echo "---" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**技术栈**: TypeScript + React + Express + WebSocket + Docker" >> $GITHUB_OUTPUT
          echo "**Node.js版本要求**: 18.0+" >> $GITHUB_OUTPUT
          echo "**构建时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 创建Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-and-test.outputs.version }}
          name: "QQ Webhook Pro ${{ needs.build-and-test.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' || !startsWith(github.ref, 'refs/tags/') }}
          files: |
            release-assets/*
          token: ${{ secrets.GITHUB_TOKEN }}

  # 4. 通知和清理
  notify:
    name: 📢 发布通知
    runs-on: ubuntu-latest
    needs: [build-and-test, create-release]
    if: always()
    
    steps:
      - name: 📢 发布成功通知
        if: needs.create-release.result == 'success'
        run: |
          echo "🎉 QQ Webhook Pro ${{ needs.build-and-test.outputs.version }} 发布成功!"
          echo ""
          echo "📦 发布包:"
          echo "  - 源码包: qq-webhook-pro-${{ needs.build-and-test.outputs.version }}-source.tar.gz"
          echo "  - 发布包: qq-webhook-pro-${{ needs.build-and-test.outputs.version }}-release.tar.gz"
          echo "  - 发布包: qq-webhook-pro-${{ needs.build-and-test.outputs.version }}-release.zip"
          echo ""
          echo "🐳 Docker镜像: ghcr.io/${{ github.repository }}:${{ needs.build-and-test.outputs.version }}"
          echo ""
          echo "🔗 Release页面: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.build-and-test.outputs.version }}"

      - name: ❌ 发布失败通知
        if: needs.create-release.result == 'failure'
        run: |
          echo "❌ QQ Webhook Pro ${{ needs.build-and-test.outputs.version }} 发布失败!"
          echo "请检查工作流日志获取详细信息。"
          exit 1
