name: 🚀 Build and Release

on:
  # 推送到主分支时触发
  push:
    branches:
      - 'master'
      - 'main'
    tags:
      - 'v*'
  
  # 手动触发发布
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: v2.0.1)'
        required: true
        default: 'v2.0.0'
        type: string
      prerelease:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean

# 设置权限
permissions:
  contents: write
  packages: write

# 环境变量
env:
  NODE_VERSION: '20'

jobs:
  # 统一的构建、测试和发布流程
  build-test-release:
    name: 🔨 构建测试并发布
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 pnpm
        uses: pnpm/action-setup@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📂 获取 pnpm 存储目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🗂️ 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔧 安装依赖
        run: |
          pnpm install --frozen-lockfile
          echo "✅ 依赖安装完成"

      - name: 📋 确定版本信息
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # 如果是标签推送，使用标签作为版本
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # 如果是分支推送，使用package.json版本 + commit hash
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            SHORT_SHA=${GITHUB_SHA::7}
            VERSION="v${PACKAGE_VERSION}-${SHORT_SHA}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "🏷️ 版本: ${VERSION}"

      - name: 🧪 运行代码检查
        run: |
          echo "🔍 运行基础语法检查..."
          pnpm run lint
          echo "✅ 基础语法检查通过"
          
          echo "🔍 运行TypeScript类型检查..."
          pnpm run type-check
          echo "✅ TypeScript类型检查通过"

      - name: 🏗️ 构建项目
        run: |
          echo "🔨 开始构建项目..."
          pnpm run build
          echo "✅ 项目构建完成"

      - name: 📦 创建部署包
        run: |
          echo "📦 准备部署包..."
          mkdir -p release-assets
          
          # 获取版本信息
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION="${{ steps.version.outputs.version }}"
          TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
          
          # 创建部署包目录
          echo "📦 创建部署包..."
          mkdir -p qq-webhook-pro-release
          
          # 复制必要文件
          echo "📁 复制构建文件..."
          cp -r dist/ qq-webhook-pro-release/
          cp package.json qq-webhook-pro-release/
          cp pnpm-lock.yaml qq-webhook-pro-release/
          cp README.md qq-webhook-pro-release/
          cp PROJECT_SUMMARY.md qq-webhook-pro-release/
          
          # 创建启动脚本
          echo "📝 创建启动脚本..."
          cat > qq-webhook-pro-release/start.sh << 'EOF'
#!/bin/bash
echo "🚀 启动 QQ Webhook Pro..."

# 检查Node.js版本
if ! command -v node &> /dev/null; then
    echo "❌ Node.js 未安装，请先安装 Node.js 18+"
    exit 1
fi

NODE_VERSION=$(node -v | sed 's/v//')
MAJOR_VERSION=$(echo $NODE_VERSION | cut -d. -f1)

if [ "$MAJOR_VERSION" -lt 18 ]; then
    echo "❌ Node.js 版本过低，需要 18+，当前版本: $NODE_VERSION"
    exit 1
fi

# 检查pnpm
if ! command -v pnpm &> /dev/null; then
    echo "📦 安装 pnpm..."
    npm install -g pnpm
fi

# 安装生产依赖
echo "📦 安装生产依赖..."
pnpm install --prod --frozen-lockfile

# 启动服务
echo "🎉 启动服务..."
pnpm start
EOF
          
          chmod +x qq-webhook-pro-release/start.sh
          
          # 创建Windows启动脚本
          cat > qq-webhook-pro-release/start.bat << 'EOF'
@echo off
chcp 65001 >nul
echo 🚀 启动 QQ Webhook Pro...

:: 检查Node.js
node --version >nul 2>&1
if errorlevel 1 (
    echo ❌ Node.js 未安装，请先安装 Node.js 18+
    pause
    exit /b 1
)

:: 检查pnpm
pnpm --version >nul 2>&1
if errorlevel 1 (
    echo 📦 安装 pnpm...
    npm install -g pnpm
)

:: 安装生产依赖
echo 📦 安装生产依赖...
pnpm install --prod --frozen-lockfile

:: 启动服务
echo 🎉 启动服务...
pnpm start
pause
EOF
          
          # 创建部署说明文件
          cat > qq-webhook-pro-release/DEPLOY.md << 'EOF'
# QQ Webhook Pro 部署包

## 🚀 快速开始

### Linux/macOS
```bash
./start.sh
```

### Windows
```batch
start.bat
```

## 📋 系统要求

- Node.js 18+
- pnpm (脚本会自动安装)

## 🌐 访问地址

启动成功后访问: http://localhost:3002

默认账号: admin / admin123

## 📚 更多文档

请查看 README.md 和 PROJECT_SUMMARY.md
EOF
          
          # 打包部署包
          echo "📦 打包部署包..."
          PACKAGE_NAME="qq-webhook-pro-${VERSION}-${COMMIT_HASH}"
          tar -czf release-assets/${PACKAGE_NAME}.tar.gz qq-webhook-pro-release/
          zip -r release-assets/${PACKAGE_NAME}.zip qq-webhook-pro-release/
          
          echo "✅ 部署包创建完成"
          echo "📁 生成的文件："
          ls -la release-assets/
          
          # 保存包名供后续步骤使用
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV

      # 仅在标签推送或手动触发时发布
      - name: 🚀 创建GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          name: "QQ Webhook Pro ${{ steps.version.outputs.version }}"
          tag_name: ${{ steps.version.outputs.version }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' || !startsWith(github.ref, 'refs/tags/') }}
          generate_release_notes: true
          files: |
            release-assets/*
          body: |
            ## 🎉 QQ Webhook Pro ${{ steps.version.outputs.version }}
            
            ### 📦 下载说明
            - **部署包 (.tar.gz)**: Linux/macOS 推荐，包含启动脚本
            - **部署包 (.zip)**: Windows 推荐，包含批处理启动脚本
            
            ### 🚀 快速开始
            1. 下载对应平台的部署包
            2. 解压到目标目录
            3. 运行启动脚本：
               - Linux/macOS: `./start.sh`
               - Windows: `start.bat`
            4. 访问 http://localhost:3002
            
            ### 📋 系统要求
            - Node.js 18+
            - pnpm (启动脚本会自动安装)
            
            ### 🔑 默认登录
            - 用户名: `admin`
            - 密码: `admin123`
            
            ### ✨ 主要功能
            - 🚀 Webhook转WebSocket实时消息转发
            - 🔐 Ed25519签名验证 + JWT认证
            - 📊 实时系统监控 (CPU/内存使用率)
            - 🎨 现代化Web管理界面
            - 🌙 深色/浅色主题切换
            - 📝 完整的操作日志系统
            
            ---
            
            📚 **文档**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) | [项目总结](https://github.com/${{ github.repository }}/blob/main/PROJECT_SUMMARY.md)
            
            🐛 **问题反馈**: [Issues](https://github.com/${{ github.repository }}/issues)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 始终上传构建产物作为Artifact
      - name: 📤 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ steps.version.outputs.version }}
          path: release-assets/
          retention-days: 30

      - name: 📢 构建完成通知
        run: |
          echo "✅ QQ Webhook Pro ${{ steps.version.outputs.version }} 构建完成!"
          echo ""
          if [[ "${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}" == "true" ]]; then
            echo "🚀 已发布到 GitHub Releases"
            echo "🔗 Release 页面: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          else
            echo "📦 构建产物已上传为 Artifact，可在 Actions 页面下载"
          fi
          echo ""
          echo "📁 包含的文件:"
          ls -la release-assets/

  